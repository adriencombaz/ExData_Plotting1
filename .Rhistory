im1[im1<0] <- 0
im1 <- im1/max(im1)
grid.raster(im1, x=unit(1.5/10, "npc"), y=unit(1.5/10, "npc"), width=unit((1-hPad)/10, "npc"), height=unit((1-hPad)/10, "npc")) #x=unit(0, "npc"), y=unit(0, "npc"))#, width==unit(1, "npc"), height=unit(1, "npc"))
plot.new()
im1 <- X[4000,]
im1 <- matrix(im1, nrow = 20)
im1[im1<0] <- 0
im1 <- im1/max(im1)
grid.raster(im1, x=unit(1/10, "npc"), y=unit(1/10, "npc"), width=unit((1-hPad)/10, "npc"), height=unit((1-hPad)/10, "npc")) #x=unit(0, "npc"), y=unit(0, "npc"))#, width==unit(1, "npc"), height=unit(1, "npc"))
hPad = 0.005
vPad = 0.005
plot.new()
im1 <- X[4000,]
im1 <- matrix(im1, nrow = 20)
im1[im1<0] <- 0
im1 <- im1/max(im1)
grid.raster(im1, x=unit(1/10, "npc"), y=unit(10/10, "npc"), width=unit((1-hPad)/10, "npc"), height=unit((1-hPad)/10, "npc")) #x=unit(0, "npc"), y=unit(0, "npc"))#, width==unit(1, "npc"), height=unit(1, "npc"))
grid.raster(im1, x=unit(1/10, "npc"), y=unit(9/10, "npc"), width=unit((1-hPad)/10, "npc"), height=unit((1-hPad)/10, "npc")) #x=unit(0, "npc"), y=unit(0, "npc"))#, width==unit(1, "npc"), height=unit(1, "npc"))
sqrt(nDim)
imWidth   <- sqrt(nDim)
imHeight  <- nDim / imWidth
imWidth   <- integer( sqrt(nDim) )
display_rows = floor( sqrt(nEx) )
display_cols = ceil( nEx / display_rows )
display_cols = ceiling( nEx / display_rows )
imWidth   <- sqrt(nDim)
imHeight  <- nDim / imWidth
# Compute number of items to display
display_rows = floor( sqrt(nExToPlot) )
display_cols = ceiling( nEx / display_rows )
nExToPlot <- 9
sel   <- sample.int(nEx, nExToPlot)
Xd    <- X[sel,]
imWidth   <- sqrt(nDim)
imHeight  <- nDim / imWidth
# Compute number of items to display
display_rows = floor( sqrt(nExToPlot) )
display_cols = ceiling( nEx / display_rows )
imWwidth <- unit((1-hPad)/10
hPad      <- 0.005
vPad      <- 0.005
imWwidth  <- unit((1-hPad)/10
plot.new()
for (iRow in 1:display_rows){
for (iCol in 1:display_cols){
im        <- X[4000,]
im        <- matrix(im, nrow = 20)
im[im<0]  <- 0
im        <- im/max(im)
grid.raster(im1, x=unit(iRow/10, "npc"), y=unit(iCol/10, "npc"), width=unit((1-hPad)/10, "npc"), height=unit((1-hPad)/10, "npc"))
}
}
imWwidth  <- unit((1-hPad)/10, "npc")
hPad      <- 0.005
vPad      <- 0.005
imWidth  <- unit((1-hPad)/10, "npc")
imHeight  <- unit((1-hPad)/10, "npc")
iIm <- 1
plot.new()
for (iRow in 1:display_rows){
for (iCol in 1:display_cols){
im        <- X[iIm,]
im        <- matrix(im, nrow = 20)
im[im<0]  <- 0
im        <- im/max(im)
grid.raster(im1, x=unit(iRow/10, "npc"), y=unit(iCol/10, "npc"), width=imWidth, height=imHeight)
iIm <- iIm+1
}
}
iIm
display_rows
display_cols
#---------------------------
# Load, plot and define data
dataDir   <- "/home/adrien/Work/Training/machine-learning/cousera-stanford/machine-learning-ex3/ex3"
filename  <- file.path( dataDir, "ex3data1.mat" )
data      <- readMat( filename )
X     <- data$X
y     <- data$y
nEx   <- dim(X)[1]
nDim  <- dim(X)[2]
nExToPlot <- 9
sel   <- sample.int(nEx, nExToPlot)
Xd    <- X[sel,]
imWidth   <- sqrt(nDim)
imHeight  <- nDim / imWidth
# Compute number of items to display
display_rows = floor( sqrt(nExToPlot) )
display_cols = ceiling( nExToPlot / display_rows )
hPad      <- 0.005
vPad      <- 0.005
imWidth  <- unit((1-hPad)/10, "npc")
imHeight  <- unit((1-hPad)/10, "npc")
iIm <- 1
plot.new()
for (iRow in 1:display_rows){
for (iCol in 1:display_cols){
im        <- Xd[iIm,]
im        <- matrix(im, nrow = 20)
im[im<0]  <- 0
im        <- im/max(im)
grid.raster(im1, x=unit(iRow/10, "npc"), y=unit(iCol/10, "npc"), width=imWidth, height=imHeight)
iIm <- iIm+1
}
}
sel
hPad      <- 0.005
vPad      <- 0.005
imWidth  <- unit((1-hPad)/10, "npc")
imHeight  <- unit((1-hPad)/10, "npc")
iIm <- 1
plot.new()
for (iRow in 1:nRows){
for (iCol in 1:nCols){
im        <- Xd[iIm,]
im        <- matrix(im, nrow = 20)
im[im<0]  <- 0
im        <- im/max(im)
grid.raster(im, x=unit((iCol-0.5)/10, "npc"), y=unit((nCols-iCol+0.5)/10, "npc"), width=imWidth, height=imHeight)
iIm <- iIm+1
}
}
nRows = floor( sqrt(nExToPlot) )
nCols = ceiling( nExToPlot / nRows )
hPad      <- 0.005
vPad      <- 0.005
imWidth  <- unit((1-hPad)/10, "npc")
imHeight  <- unit((1-hPad)/10, "npc")
iIm <- 1
plot.new()
for (iRow in 1:nRows){
for (iCol in 1:nCols){
im        <- Xd[iIm,]
im        <- matrix(im, nrow = 20)
im[im<0]  <- 0
im        <- im/max(im)
grid.raster(im, x=unit((iCol-0.5)/10, "npc"), y=unit((nCols-iCol+0.5)/10, "npc"), width=imWidth, height=imHeight)
iIm <- iIm+1
}
}
hPad      <- 0.005
vPad      <- 0.005
imWidth  <- unit((1-hPad)/10, "npc")
imHeight  <- unit((1-hPad)/10, "npc")
iIm <- 1
plot.new()
iRow = 1
iCol = 1
im        <- Xd[iIm,]
im        <- matrix(im, nrow = 20)
im[im<0]  <- 0
im        <- im/max(im)
grid.raster(im, x=unit((iCol-0.5)/10, "npc"), y=unit((nCols-iCol+0.5)/10, "npc"), width=imWidth, height=imHeight)
iIm <- iIm+1
iCol = 2
im        <- Xd[iIm,]
im        <- matrix(im, nrow = 20)
im[im<0]  <- 0
im        <- im/max(im)
grid.raster(im, x=unit((iCol-0.5)/10, "npc"), y=unit((nCols-iCol+0.5)/10, "npc"), width=imWidth, height=imHeight)
iIm <- iIm+1
nRows = floor( sqrt(nExToPlot) )
nCols = ceiling( nExToPlot / nRows )
hPad      <- 0.005
vPad      <- 0.005
imWidth  <- unit((1-hPad)/10, "npc")
imHeight  <- unit((1-hPad)/10, "npc")
iIm <- 1
plot.new()
for (iRow in 1:nRows){
for (iCol in 1:nCols){
im        <- Xd[iIm,]
im        <- matrix(im, nrow = 20)
im[im<0]  <- 0
im        <- im/max(im)
grid.raster(im, x=unit((iCol-0.5)/10, "npc"), y=unit((nRows-iRow+0.5)/10, "npc"), width=imWidth, height=imHeight)
iIm <- iIm+1
}
}
sel
source('~/Work/Training/machine-learning/cousera-stanford/machine-learning-ex3/ex3/Ex3.R', echo=TRUE)
rm(list = ls())
library(ggplot2)
library(plyr)
library(R.matlab)
library(grid)
#==============================================================================
# PREPROCESS
#==============================================================================
#---------------------------
# Load, plot and define data
dataDir   <- "/home/adrien/Work/Training/machine-learning/cousera-stanford/machine-learning-ex3/ex3"
filename  <- file.path( dataDir, "ex3data1.mat" )
data      <- readMat( filename )
X     <- data$X
y     <- data$y
nEx   <- dim(X)[1]
nDim  <- dim(X)[2]
nExToPlot <- 9
sel   <- sample.int(nEx, nExToPlot)
Xd    <- X[sel,]
imWidth   <- sqrt(nDim)
imHeight  <- nDim / imWidth
# Compute number of items to display
nRows = floor( sqrt(nExToPlot) )
nCols = ceiling( nExToPlot / nRows )
hPad      <- 0.005
vPad      <- 0.005
imWidth  <- unit((1-hPad)/10, "npc")
imHeight  <- unit((1-hPad)/10, "npc")
iIm <- 1
plot.new()
for (iRow in 1:nRows){
for (iCol in 1:nCols){
im        <- Xd[iIm,]
im        <- matrix(im, nrow = 20)
im[im<0]  <- 0
im        <- im/max(im)
grid.raster(im, x=unit((iCol-0.5)/10, "npc"), y=unit((nRows-iRow+0.5)/10, "npc"), width=imWidth, height=imHeight)
iIm <- iIm+1
}
}
sel
source('~/Work/Training/machine-learning/cousera-stanford/machine-learning-ex3/ex3/Ex3.R', echo=TRUE)
source('~/Work/Training/machine-learning/cousera-stanford/machine-learning-ex3/ex3/Ex3.R', echo=TRUE)
source('~/Work/Training/machine-learning/cousera-stanford/machine-learning-ex3/ex3/Ex3.R', echo=TRUE)
source('~/Work/Training/machine-learning/cousera-stanford/machine-learning-ex3/ex3/Ex3.R', echo=TRUE)
displayData(Xd)
source('~/Work/Training/machine-learning/cousera-stanford/machine-learning-ex3/ex3/Ex3.R', echo=TRUE)
dataW   <- readMat( file.path( dataDir, "ex3weights.mat" ) )
Theta1  <- dataW$Theta1
Theta2  <- dataW$Theta2
X   <- cbind(intercept=1, X)
a2  <- sigmoid( X %*% t(Theta1) )
sigmoid <- function(X){
d = 1.0 / ( 1.0 +  exp(-1.0 * X) )
return(d)
}
a2  <- sigmoid( X %*% t(Theta1) )
a2  <- cbind(intercept=1, a2)
a3  <- sigmoid( a2 %*% t(Theta2) )
p   <- max.col(a3)
cat('\nTraining Accuracy: ', mean((p == y) * 100))
(3*1.01**3+2)
( (3*1.01**3+2) - (3*0.99**3+2) ) / 0.02
library(datasets)
data(iris)
?iris
summary(iris)
summary(iris[iris$Species='virginica'])
iris[ iris$Species == 'virginica', ]
summary(iris[ iris$Species == 'virginica', ])
summary(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
data(mtcars)
summary(mtcars)
str(mtcars)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars[mtcars$cyl==4,]$hp)
mean(mtcars[mtcars$cyl==8,]$hp) - mean(mtcars[mtcars$cyl==4,]$hp)
ls
ls()
debug(ls)
ls()
exit()
source('~/adminStuff/phone/test.R', echo=TRUE)
source('~/adminStuff/phone/test.R', echo=TRUE)
pp
f(3)
source('~/adminStuff/phone/test.R', echo=TRUE)
f(3)
install.packages("RCurl")
install.packages("RCurl")
library(data.table)
data2 <- fread("household_power_consumption.txt", sep=";", header=TRUE, na.strings="?", nrows=50, skip=6840)
setwd("/home/adrien/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/")
rm(list = ls())
library(data.table)
data2 <- fread("household_power_consumption.txt", sep=";", header=TRUE, na.strings="?", nrows=50, skip=6840)
data2
data2 <- fread("household_power_consumption.txt", sep=";", header=TRUE, na.strings="?", nrows=50, skip=6830)
data2
data2 <- fread("household_power_consumption.txt", sep=";", header=TRUE, na.strings="?", nrows=50, skip=6840)
data2
data2 <- fread("household_power_consumption.txt", sep=";", header=F, na.strings="?", nrows=50, skip=6840)
data2 <- fread("household_power_consumption.txt", sep=";", header=F, na.strings="?", nrows=50, skip=6830)
data2 <- fread("household_power_consumption.txt", sep=";", header=F, na.strings="?", nrows=50, skip=6840)
data2
data2 <- fread("household_power_consumption.txt", sep=";", header=F, na.strings="?", nrows=50, skip=6839)
data2
summary(data2)
str(data2)
data2 <- fread("household_power_consumption.txt", sep=";", header=F, na.strings="?", nrows=50, skip=6830)
str(data2)
data2
data2 <- fread(pipe('grep "^[1-2]/2/2007" "household_power_consumption.txt"'), sep=";", header=F, na.strings="?", nrows=50, skip=6830)
subData6 <- read.table(pipe("sed -n '\|^[1-2]/2/2007|p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe("sed -n '/^[1-2]\/2\/2007/p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe("sed -n ':^[1-2]/2/2007:p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe("sed ':^[1-2]/2/2007:p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData2 <- read.table(pipe('grep "^[1-2]/2/2007" "household_power_consumption.txt"'), sep=";", header=T, na.strings="?")
subData6 <- read.table(pipe("sed -n '/^[1-2]\/2\/2007/p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe("sed -n '/^[1-2]/2/2007/p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe("sed -n '─|^[1-2]/2/2007|p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe("sed -n '─\|^[1-2]/2/2007|p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe("sed -n '─,^[1-2]/2/2007,p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe("sed -n '─:^[1-2]/2/2007:p' household_power_consumption.txt"), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe('sed -n ":^[1-2]/2/2007:p" household_power_consumption.txt'), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe('sed -n "/^[1-2]\/2/\2007/p" household_power_consumption.txt'), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe('sed -n "/^[1-2]/2/2007/p" household_power_consumption.txt'), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe('sed -n "/^[1-2]/2/2007/p" household_power_consumption.txt'), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe('sed -n "/^[1-2]\\/2\\/2007/p" household_power_consumption.txt'), sep=";", header=F, na.strings="?")
subData5 <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
"household_power_consumption.txt")),
sep=";", header=T, na.strings="?")
subData6 <- read.table(pipe('sed -n "1p" "/^[1-2]\\/2\\/2007/p" household_power_consumption.txt'), sep=";", header=F, na.strings="?")
subData6 <- read.table(pipe('sed -n -e "1p" -e "/^[1-2]\\/2\\/2007/p" household_power_consumption.txt'), sep=";", header=F, na.strings="?")
subData2 <- read.table(pipe('grep "^[1-2]/2/2007" "household_power_consumption.txt"'), sep=";", header=T, na.strings="?")
subData6 <- read.table(pipe('sed -n -e "1p" -e "/^[1-2]\\/2\\/2007/p" household_power_consumption.txt'), sep=";", header=T, na.strings="?")
subData6[1:10,]
subData2 <- read.table(pipe('grep "^[1-2]/2/2007" "household_power_consumption.txt"'), sep=";", header=F, na.strings="?")
subData3 <- read.table(pipe('sed -n -e "1p" -e "/^[1-2]\\/2\\/2007/p" household_power_consumption.txt'), sep=";", header=T, na.strings="?")
subData  <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
"household_power_consumption.txt")),
sep=";", header=T, na.strings="?")
setwd("/home/adrien/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/")
rm(list = ls())
####################################################### CHOSEN METHOD ############################################################################
subData  <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
"household_power_consumption.txt")),
sep=";", header=T, na.strings="?")
####################################################### CHOSEN METHOD ############################################################################
#===============================================================================================================================
summary(subData)
str(subData)
subData$Date <- as.Date(subData$Date)
str(subData)
summary(subData)
subData  <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
"household_power_consumption.txt")),
sep=";", header=T, na.strings="?")
summary(subData)
str(subData)
summary(subData)
str(subData)
subData$Date <- as.Date(subData$Date, "%d/%m/%y")
str(subData)
summary(subData)
subData[1:10,]
subData  <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
"household_power_consumption.txt")),
sep=";", header=T, na.strings="?")
subData[1:10,]
tt <- c("1/2/2007","2/2/2007")
rr <- as.Date(tt)
rr
rr <- as.Date(tt, "%d/%m/%Y")
rr
summary(subData)
str(subData)
subData$Date <- as.Date(subData$Date, "%d/%m/%Y")
summary(subData)
str(subData)
subData[1:10,]
subData[1:100,]
summary(subData)
str(subData)
subData[1:10,]
10*5*24
10*6*24
subData$Time2 <- strptime(subData$Time, "%H:%M:%S")
summary(subData)
str(subData)
subData[1:10,]
subData  <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
"household_power_consumption.txt")),
sep=";", header=T, na.strings="?")
test <- paste(subData$Date, subData$Time)
test[1:10]
subData$Date2 <- as.Date(subData$Date, "%d/%m/%Y")
subData$Time2 <- strptime( paste(subData$Date, subData$Time), "%d/%m/%Y %H:%M:%S")
summary(subData)
str(subData)
rm(list = ls())
filePath <- "/home/adrien/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/"
filename <- file.path(filePath, "household_power_consumption.txt")
data <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
filename)),
sep=";", header=T, na.strings="?")
library(ggplot)
library(ggplot2)
head(data)
summary(data)
str(data)
hist(data$Global_active_power)
pp <- ggplot(data, aes(x=Global_active_power))
pp <- pp + geom_histogram()
pp
pp <- pp + geom_histogram(binwidth=.25)
pp <- pp + geom_histogram(binwidth=.25)
pp
hist(data$Global_active_power)
pp
pp1 <- hist(data$Global_active_power)
pp1 <- hist(data$Global_active_power, col='r')
pp1 <- hist(data$Global_active_power, col="red")
pp1 <- hist(data$Global_active_power, col="red", title="Global Active Powze")
pp1 <- hist(data$Global_active_power, col="red")
title(main="Global Active Power", xlab="Global Active Power (kilowatts)")
pp1 <- hist(data$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
pp <- ggplot(data, aes(x=Global_active_power))
pp <- pp + geom_histogram(binwidth=.25)
pp
pp <- pp + geom_histogram(binwidth=10)
pp <- pp + geom_histogram(fill="red", binwidth=10)
pp
pp <- ggplot(data, aes(x=Global_active_power))
pp <- pp + geom_histogram(fill="red", binwidth=0.25)
pp
pp <- ggplot(data, aes(x=Global_active_power))
pp <- pp + geom_histogram(fill="red", colour="black", binwidth=0.25)
pp <- pp + geom_histogram(fill="red", colour="black", binwidth=0.25)
pp
pp <- ggplot(data, aes(x=Global_active_power))
pp <- pp + geom_histogram(fill="red", colour="black", binwidth=0.5)
pp
pp <- hist( data$Global_active_power
, col="red"
, main="Global Active Power"
, xlab="Global Active Power (kilowatts)"
)
pp <- hist( data$Global_active_power
, col="red"
, main="Global Active Power"
, xlab="Global Active Power (kilowatts)"
)
pp
source('~/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/ExData_Plotting1/plot1.R', echo=TRUE)
data  <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
"household_power_consumption.txt")),
sep=";", header=T, na.strings="?")
str(data)
source('~/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/ExData_Plotting1/plot1.R', echo=TRUE)
source('~/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/ExData_Plotting1/plot1.R', echo=TRUE)
str(data)
summary(data)
head(data)
subData$Date2 <- as.Date(subData$Date, "%d/%m/%Y")
subData$Time2 <- strptime( paste(subData$Date, subData$Time), "%d/%m/%Y %H:%M:%S")
str(data)
summary(data)
head(data)
setwd("/home/adrien/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/ExData_Plotting1/")
rm(list = ls())
library(ggplot2)
#=============================================================================================================
# LOAD AND OBSERVE DATA
#=============================================================================================================
filePath <- "/home/adrien/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/"
filename <- file.path(filePath, "household_power_consumption.txt")
data  <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
"household_power_consumption.txt")),
sep=";", header=T, na.strings="?")
data$Date2 <- as.Date(data$Date, "%d/%m/%Y")
data$Time2 <- strptime( paste(data$Date, data$Time), "%d/%m/%Y %H:%M:%S")
str(data)
summary(data)
head(data)
#========================
setwd("/home/adrien/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/ExData_Plotting1/")
rm(list = ls())
library(ggplot2)
#=============================================================================================================
# LOAD AND OBSERVE DATA
#=============================================================================================================
filePath <- "/home/adrien/Work/Training/data-scientist-specialization/04-Exploratory-Data-Analysis/assignment1/"
filename <- file.path(filePath, "household_power_consumption.txt")
data  <- read.table(pipe( paste0("awk -F\";\" -v col=\"Date\" ",                                                 # Define field delimiter and column name that we want to inspect
"'NR==1 {for(i=1; i<=NF ; i++){ if($i==col){ n=i ; print; break; } }} ",        # Find the position of our target column (column names are in the first line of the file, hence the NR=1), prints also the header line
"match($n, \"^[1-2]/2/2007\") {print $0}' ",                                    # Print only the lines for which the value in our target column matches the regular expression
"household_power_consumption.txt")),
sep=";", header=T, na.strings="?")
data$Date2 <- as.Date(data$Date, "%d/%m/%Y")
data$Time2 <- strptime( paste(data$Date, data$Time), "%d/%m/%Y %H:%M:%S")
str(data)
summary(data)
head(data)
